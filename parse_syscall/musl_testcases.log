#### OS COMP TEST GROUP START busybox-musl ####
#### independent command test
testcase busybox echo "#### independent command test" success
testcase busybox ash -c exit success
testcase busybox sh -c exit success
bbb
testcase busybox basename /aaa/bbb success
     March 2025
Su Mo Tu We Th Fr Sa
                   1
 2  3  4  5  6  7  8
 9 10 11 12 13 14 15
16 17 18 19 20 21 22
23 24 25 26 27 28 29
30 31
testcase busybox cal success
[H[Jtestcase busybox clear success
Thu Mar  6 03:00:15 UTC 2025
testcase busybox date success
Filesystem           1K-blocks      Used Available Use% Mounted on
overlay              3921214140 1197962800 2523989788  32% /
tmpfs                    65536         0     65536   0% /dev
shm                      65536         0     65536   0% /dev/shm
/dev/loop5              117203     16158     91871  15% /code
/dev/nvme1n1p3       3921214140 1197962800 2523989788  32% /etc/resolv.conf
/dev/nvme1n1p3       3921214140 1197962800 2523989788  32% /etc/hostname
/dev/nvme1n1p3       3921214140 1197962800 2523989788  32% /etc/hosts
testcase busybox df success
/aaa
testcase busybox dirname /aaa/bbb success
# 此处省略了一些不必要的输出
[155308.535228] [UFW BLOCK] IN=eno2 OUT= MAC=7c:c2:55:83:14:a9:88:2a:5e:97:b8:02:08:00 SRC=176.65.138.19 DST=166.111.237.242 LEN=40 TOS=0x00 PREC=0x00 TTL=239 ID=32863 PROTO=TCP SPT=55051 DPT=11428 WINDOW=1024 RES=0x00 SYN URGP=0 
testcase busybox dmesg success
1	./basic/mnt
2523	./basic
758	./lib
7296	.
testcase busybox du success
2
testcase busybox expr 1 + 1 success
testcase busybox false success
testcase busybox true success
/usr/bin/ls
testcase busybox which ls success
Linux
testcase busybox uname success
 03:00:15 up 1 day, 19:08,  0 users,  load average: 0.29, 0.49, 1.40
testcase busybox uptime success
abcntestcase busybox printf "abcn" success
PID   USER     TIME  COMMAND
    1 root      0:00 sleep inf
    7 root      0:00 bash
 1456 root      0:00 strace ./busybox sh ./test_all.sh
 1459 root      0:00 ./busybox sh ./test_all.sh
 1460 root      0:00 {busybox_testcod} ./busybox sh ./busybox_testcode.sh
 1463 root      0:00 {busybox_testcod} ./busybox sh ./busybox_testcode.sh
 1482 root      0:00 ./busybox ps
testcase busybox ps success
/code
testcase busybox pwd success
              total        used        free      shared  buff/cache   available
Mem:      131660596    65366028    42587704       53476    23706864    64890476
Swap:             0           0           0
testcase busybox free success
Thu Mar  6 03:00:15 2025  0.000000 seconds
testcase busybox hwclock success
testcase busybox kill 10 success
basic
basic_testcode.sh
busybox
busybox_cmd.txt
busybox_testcode.sh
date.lua
entry-dynamic.exe
entry-static.exe
file_io.lua
iozone
iozone_testcode.sh
lib
libctest_testcode.sh
lua
lua_testcode.sh
max_min.lua
musl.log
random.lua
remove.lua
round_num.lua
run-dynamic.sh
run-static.sh
runtest.exe
sin30.lua
sort.lua
strace.log
strings.lua
test.sh
test_all.sh
testcase busybox ls success
testcase busybox sleep 1 success
#### file opration test
testcase busybox echo "#### file opration test" success
testcase busybox touch test.txt success
testcase busybox echo "hello world" > test.txt success
hello world
testcase busybox cat test.txt success
l
testcase busybox cut -c 3 test.txt success
0000000 062550 066154 020157 067567 066162 005144
0000014
testcase busybox od test.txt success
hello world
testcase busybox head test.txt success
hello world
testcase busybox tail test.txt success
00000000  68 65 6c 6c 6f 20 77 6f  72 6c 64 0a              |hello world.|
0000000c
testcase busybox hexdump -C test.txt success
6f5902ac237024bdd0c176cb93063dc4  test.txt
testcase busybox md5sum test.txt success
testcase busybox echo "ccccccc" >> test.txt success
testcase busybox echo "bbbbbbb" >> test.txt success
testcase busybox echo "aaaaaaa" >> test.txt success
testcase busybox echo "2222222" >> test.txt success
testcase busybox echo "1111111" >> test.txt success
testcase busybox echo "bbbbbbb" >> test.txt success
1111111
2222222
aaaaaaa
bbbbbbb
ccccccc
hello world
testcase busybox sort test.txt | ./busybox uniq success
  File: test.txt
  Size: 60        	Blocks: 2          IO Block: 1024   regular file
Device: 705h/1797d	Inode: 153         Links: 1
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)
Access: 2025-03-06 03:00:16.564724081 +0000
Modify: 2025-03-06 03:00:16.563724090 +0000
Change: 2025-03-06 03:00:16.563724090 +0000
testcase busybox stat test.txt success
hello world
ccccccc
bbbbbbb
aaaaaaa
2222222
1111111
bbbbbbb
testcase busybox strings test.txt success
        7         8        60 test.txt
testcase busybox wc test.txt success
testcase busybox [ -f test.txt ] success
hello world
ccccccc
bbbbbbb
aaaaaaa
2222222
1111111
bbbbbbb
testcase busybox more test.txt success
testcase busybox rm test.txt success
testcase busybox mkdir test_dir success
testcase busybox mv test_dir test success
testcase busybox rmdir test success
echo "hello world" > test.txt
grep hello busybox_cmd.txt
testcase busybox grep hello busybox_cmd.txt success
testcase busybox cp busybox_cmd.txt busybox_cmd.bak success
testcase busybox rm busybox_cmd.bak success
./busybox_cmd.txt
testcase busybox find -name "busybox_cmd.txt" success
#### OS COMP TEST GROUP END busybox-musl ####
#### OS COMP TEST GROUP START iozone-musl ####
iozone automatic measurements
	Iozone: Performance Test of File I/O
	        Version $Revision: 3.506 $
		Compiled for 64 bit mode.
		Build: linux

	Contributors:William Norcott, Don Capps, Isom Crawford, Kirby Collins
	             Al Slater, Scott Rhine, Mike Wisner, Ken Goss
	             Steve Landherr, Brad Smith, Mark Kelly, Dr. Alain CYR,
	             Randy Dunlap, Mark Montague, Dan Million, Gavin Brebner,
	             Jean-Marc Zucconi, Jeff Blomberg, Benny Halevy, Dave Boone,
	             Erik Habbinga, Kris Strecker, Walter Wong, Joshua Root,
	             Fabrice Bacchella, Zhenghua Xue, Qin Li, Darren Sawyer,
	             Vangel Bojaxhi, Ben England, Vikentsi Lapa,
	             Alexey Skidanov, Sudhir Kumar.

	Run began: Thu Mar  6 16:17:48 2025

	Auto Mode
	Record Size 1 kB
	File size set to 4096 kB
	Command line used: ./iozone -a -r 1k -s 4m
	Output is in kBytes/sec
	Time Resolution = 0.000001 seconds.
	Processor cache size set to 1024 kBytes.
	Processor cache line size set to 32 bytes.
	File stride size set to 17 * record size.
                                                                    random    random      bkwd     record     stride
              kB  reclen    write    rewrite      read    reread      read     write      read    rewrite       read    fwrite  frewrite     fread   freread
            4096       1     92195     96412    103610    105211     54174     50286     54375      51655      55967     71035     67521     67036     69975

iozone test complete.
iozone throughput write/read measurements
	Iozone: Performance Test of File I/O
	        Version $Revision: 3.506 $
		Compiled for 64 bit mode.
		Build: linux

	Contributors:William Norcott, Don Capps, Isom Crawford, Kirby Collins
	             Al Slater, Scott Rhine, Mike Wisner, Ken Goss
	             Steve Landherr, Brad Smith, Mark Kelly, Dr. Alain CYR,
	             Randy Dunlap, Mark Montague, Dan Million, Gavin Brebner,
	             Jean-Marc Zucconi, Jeff Blomberg, Benny Halevy, Dave Boone,
	             Erik Habbinga, Kris Strecker, Walter Wong, Joshua Root,
	             Fabrice Bacchella, Zhenghua Xue, Qin Li, Darren Sawyer,
	             Vangel Bojaxhi, Ben England, Vikentsi Lapa,
	             Alexey Skidanov, Sudhir Kumar.

	Run began: Thu Mar  6 16:17:49 2025

	Record Size 1 kB
	File size set to 1024 kB
	Command line used: ./iozone -t 4 -i 0 -i 1 -r 1k -s 1m
	Output is in kBytes/sec
	Time Resolution = 0.000001 seconds.
	Processor cache size set to 1024 kBytes.
	Processor cache line size set to 32 bytes.
	File stride size set to 17 * record size.
	Throughput test with 4 processes
	Each process writes a 1024 kByte file in 1 kByte records

	Children see throughput for  4 initial writers 	=  304483.01 kB/sec
	Parent sees throughput for  4 initial writers 	=  178056.89 kB/sec
	Min throughput per process 			=   71092.91 kB/sec
	Max throughput per process 			=   83034.96 kB/sec
	Avg throughput per process 			=   76120.75 kB/sec
	Min xfer 					=     877.00 kB

	Children see throughput for  4 rewriters 	=  344017.88 kB/sec
	Parent sees throughput for  4 rewriters 	=  186965.66 kB/sec
	Min throughput per process 			=   80711.88 kB/sec
	Max throughput per process 			=   91739.87 kB/sec
	Avg throughput per process 			=   86004.47 kB/sec
	Min xfer 					=     898.00 kB

	Children see throughput for  4 readers 		=  372726.52 kB/sec
	Parent sees throughput for  4 readers 		=  195666.15 kB/sec
	Min throughput per process 			=   89609.08 kB/sec
	Max throughput per process 			=   96367.12 kB/sec
	Avg throughput per process 			=   93181.63 kB/sec
	Min xfer 					=     958.00 kB

	Children see throughput for 4 re-readers 	=  343976.47 kB/sec
	Parent sees throughput for 4 re-readers 	=  196155.60 kB/sec
	Min throughput per process 			=   82301.42 kB/sec
	Max throughput per process 			=   89385.74 kB/sec
	Avg throughput per process 			=   85994.12 kB/sec
	Min xfer 					=     944.00 kB



iozone test complete.
iozone throughput random-read measurements
	Iozone: Performance Test of File I/O
	        Version $Revision: 3.506 $
		Compiled for 64 bit mode.
		Build: linux

	Contributors:William Norcott, Don Capps, Isom Crawford, Kirby Collins
	             Al Slater, Scott Rhine, Mike Wisner, Ken Goss
	             Steve Landherr, Brad Smith, Mark Kelly, Dr. Alain CYR,
	             Randy Dunlap, Mark Montague, Dan Million, Gavin Brebner,
	             Jean-Marc Zucconi, Jeff Blomberg, Benny Halevy, Dave Boone,
	             Erik Habbinga, Kris Strecker, Walter Wong, Joshua Root,
	             Fabrice Bacchella, Zhenghua Xue, Qin Li, Darren Sawyer,
	             Vangel Bojaxhi, Ben England, Vikentsi Lapa,
	             Alexey Skidanov, Sudhir Kumar.

	Run began: Thu Mar  6 16:18:01 2025

	Record Size 1 kB
	File size set to 1024 kB
	Command line used: ./iozone -t 4 -i 0 -i 2 -r 1k -s 1m
	Output is in kBytes/sec
	Time Resolution = 0.000001 seconds.
	Processor cache size set to 1024 kBytes.
	Processor cache line size set to 32 bytes.
	File stride size set to 17 * record size.
	Throughput test with 4 processes
	Each process writes a 1024 kByte file in 1 kByte records

	Children see throughput for  4 initial writers 	=  149379.45 kB/sec
	Parent sees throughput for  4 initial writers 	=   99036.81 kB/sec
	Min throughput per process 			=   31653.86 kB/sec
	Max throughput per process 			=   45014.58 kB/sec
	Avg throughput per process 			=   37344.86 kB/sec
	Min xfer 					=     718.00 kB

	Children see throughput for  4 rewriters 	=  242625.41 kB/sec
	Parent sees throughput for  4 rewriters 	=  145145.80 kB/sec
	Min throughput per process 			=   47231.88 kB/sec
	Max throughput per process 			=   72582.24 kB/sec
	Avg throughput per process 			=   60656.35 kB/sec
	Min xfer 					=     669.00 kB

	Children see throughput for 4 random readers 	=  122355.41 kB/sec
	Parent sees throughput for 4 random readers 	=   89903.93 kB/sec
	Min throughput per process 			=   26310.79 kB/sec
	Max throughput per process 			=   38815.86 kB/sec
	Avg throughput per process 			=   30588.85 kB/sec
	Min xfer 					=     693.00 kB

	Children see throughput for 4 random writers 	=  110285.38 kB/sec
	Parent sees throughput for 4 random writers 	=   62583.16 kB/sec
	Min throughput per process 			=   21833.84 kB/sec
	Max throughput per process 			=   33310.64 kB/sec
	Avg throughput per process 			=   27571.35 kB/sec
	Min xfer 					=     671.00 kB



iozone test complete.
iozone throughput read-backwards measurements
	Iozone: Performance Test of File I/O
	        Version $Revision: 3.506 $
		Compiled for 64 bit mode.
		Build: linux

	Contributors:William Norcott, Don Capps, Isom Crawford, Kirby Collins
	             Al Slater, Scott Rhine, Mike Wisner, Ken Goss
	             Steve Landherr, Brad Smith, Mark Kelly, Dr. Alain CYR,
	             Randy Dunlap, Mark Montague, Dan Million, Gavin Brebner,
	             Jean-Marc Zucconi, Jeff Blomberg, Benny Halevy, Dave Boone,
	             Erik Habbinga, Kris Strecker, Walter Wong, Joshua Root,
	             Fabrice Bacchella, Zhenghua Xue, Qin Li, Darren Sawyer,
	             Vangel Bojaxhi, Ben England, Vikentsi Lapa,
	             Alexey Skidanov, Sudhir Kumar.

	Run began: Thu Mar  6 16:18:17 2025

	Record Size 1 kB
	File size set to 1024 kB
	Command line used: ./iozone -t 4 -i 0 -i 3 -r 1k -s 1m
	Output is in kBytes/sec
	Time Resolution = 0.000001 seconds.
	Processor cache size set to 1024 kBytes.
	Processor cache line size set to 32 bytes.
	File stride size set to 17 * record size.
	Throughput test with 4 processes
	Each process writes a 1024 kByte file in 1 kByte records

	Children see throughput for  4 initial writers 	=  203998.67 kB/sec
	Parent sees throughput for  4 initial writers 	=  114780.27 kB/sec
	Min throughput per process 			=   41598.62 kB/sec
	Max throughput per process 			=   64435.01 kB/sec
	Avg throughput per process 			=   50999.67 kB/sec
	Min xfer 					=     658.00 kB

	Children see throughput for  4 rewriters 	=  247730.27 kB/sec
	Parent sees throughput for  4 rewriters 	=  141773.04 kB/sec
	Min throughput per process 			=   51792.33 kB/sec
	Max throughput per process 			=   79937.89 kB/sec
	Avg throughput per process 			=   61932.57 kB/sec
	Min xfer 					=     663.00 kB

	Children see throughput for 4 reverse readers 	=  120608.12 kB/sec
	Parent sees throughput for 4 reverse readers 	=   93787.99 kB/sec
	Min throughput per process 			=   23720.71 kB/sec
	Max throughput per process 			=   36308.24 kB/sec
	Avg throughput per process 			=   30152.03 kB/sec
	Min xfer 					=     669.00 kB



iozone test complete.
iozone throughput stride-read measurements
	Iozone: Performance Test of File I/O
	        Version $Revision: 3.506 $
		Compiled for 64 bit mode.
		Build: linux

	Contributors:William Norcott, Don Capps, Isom Crawford, Kirby Collins
	             Al Slater, Scott Rhine, Mike Wisner, Ken Goss
	             Steve Landherr, Brad Smith, Mark Kelly, Dr. Alain CYR,
	             Randy Dunlap, Mark Montague, Dan Million, Gavin Brebner,
	             Jean-Marc Zucconi, Jeff Blomberg, Benny Halevy, Dave Boone,
	             Erik Habbinga, Kris Strecker, Walter Wong, Joshua Root,
	             Fabrice Bacchella, Zhenghua Xue, Qin Li, Darren Sawyer,
	             Vangel Bojaxhi, Ben England, Vikentsi Lapa,
	             Alexey Skidanov, Sudhir Kumar.

	Run began: Thu Mar  6 16:18:30 2025

	Record Size 1 kB
	File size set to 1024 kB
	Command line used: ./iozone -t 4 -i 0 -i 5 -r 1k -s 1m
	Output is in kBytes/sec
	Time Resolution = 0.000001 seconds.
	Processor cache size set to 1024 kBytes.
	Processor cache line size set to 32 bytes.
	File stride size set to 17 * record size.
	Throughput test with 4 processes
	Each process writes a 1024 kByte file in 1 kByte records

	Children see throughput for  4 initial writers 	=  173415.60 kB/sec
	Parent sees throughput for  4 initial writers 	=  113434.62 kB/sec
	Min throughput per process 			=   39606.73 kB/sec
	Max throughput per process 			=   50401.07 kB/sec
	Avg throughput per process 			=   43353.90 kB/sec
	Min xfer 					=     802.00 kB

	Children see throughput for  4 rewriters 	=  213103.34 kB/sec
	Parent sees throughput for  4 rewriters 	=  137831.72 kB/sec
	Min throughput per process 			=   50537.34 kB/sec
	Max throughput per process 			=   58264.65 kB/sec
	Avg throughput per process 			=   53275.83 kB/sec
	Min xfer 					=     889.00 kB

	Children see throughput for 4 stride readers 	=  115492.52 kB/sec
	Parent sees throughput for 4 stride readers 	=   89786.76 kB/sec
	Min throughput per process 			=   24873.80 kB/sec
	Max throughput per process 			=   35369.96 kB/sec
	Avg throughput per process 			=   28873.13 kB/sec
	Min xfer 					=     720.00 kB



iozone test complete.
iozone throughput fwrite/fread measurements
	Iozone: Performance Test of File I/O
	        Version $Revision: 3.506 $
		Compiled for 64 bit mode.
		Build: linux

	Contributors:William Norcott, Don Capps, Isom Crawford, Kirby Collins
	             Al Slater, Scott Rhine, Mike Wisner, Ken Goss
	             Steve Landherr, Brad Smith, Mark Kelly, Dr. Alain CYR,
	             Randy Dunlap, Mark Montague, Dan Million, Gavin Brebner,
	             Jean-Marc Zucconi, Jeff Blomberg, Benny Halevy, Dave Boone,
	             Erik Habbinga, Kris Strecker, Walter Wong, Joshua Root,
	             Fabrice Bacchella, Zhenghua Xue, Qin Li, Darren Sawyer,
	             Vangel Bojaxhi, Ben England, Vikentsi Lapa,
	             Alexey Skidanov, Sudhir Kumar.

	Run began: Thu Mar  6 16:18:42 2025

	Record Size 1 kB
	File size set to 1024 kB
	Command line used: ./iozone -t 4 -i 6 -i 7 -r 1k -s 1m
	Output is in kBytes/sec
	Time Resolution = 0.000001 seconds.
	Processor cache size set to 1024 kBytes.
	Processor cache line size set to 32 bytes.
	File stride size set to 17 * record size.
	Throughput test with 4 processes
	Each process writes a 1024 kByte file in 1 kByte records

	Children see throughput for  4 fwriters 	=  103643.83 kB/sec
	Parent sees throughput for  4 fwriters 		=   87554.65 kB/sec
	Min throughput per process 			=   24130.41 kB/sec
	Max throughput per process 			=   27633.91 kB/sec
	Avg throughput per process 			=   25910.96 kB/sec
	Min xfer 					=    1024.00 kB

	Children see throughput for  4 freaders 	=   95334.63 kB/sec
	Parent sees throughput for  4 freaders 		=   86262.60 kB/sec
	Min throughput per process 			=   21753.85 kB/sec
	Max throughput per process 			=   28206.29 kB/sec
	Avg throughput per process 			=   23833.66 kB/sec
	Min xfer 					=    1024.00 kB



iozone test complete.
iozone throughput pwrite/pread measurements
	Iozone: Performance Test of File I/O
	        Version $Revision: 3.506 $
		Compiled for 64 bit mode.
		Build: linux

	Contributors:William Norcott, Don Capps, Isom Crawford, Kirby Collins
	             Al Slater, Scott Rhine, Mike Wisner, Ken Goss
	             Steve Landherr, Brad Smith, Mark Kelly, Dr. Alain CYR,
	             Randy Dunlap, Mark Montague, Dan Million, Gavin Brebner,
	             Jean-Marc Zucconi, Jeff Blomberg, Benny Halevy, Dave Boone,
	             Erik Habbinga, Kris Strecker, Walter Wong, Joshua Root,
	             Fabrice Bacchella, Zhenghua Xue, Qin Li, Darren Sawyer,
	             Vangel Bojaxhi, Ben England, Vikentsi Lapa,
	             Alexey Skidanov, Sudhir Kumar.

	Run began: Thu Mar  6 16:18:50 2025

	Record Size 1 kB
	File size set to 1024 kB
	Command line used: ./iozone -t 4 -i 9 -i 10 -r 1k -s 1m
	Output is in kBytes/sec
	Time Resolution = 0.000001 seconds.
	Processor cache size set to 1024 kBytes.
	Processor cache line size set to 32 bytes.
	File stride size set to 17 * record size.
	Throughput test with 4 processes
	Each process writes a 1024 kByte file in 1 kByte records

	Children see throughput for 4 pwrite writers 	=  144474.37 kB/sec
	Parent sees throughput for 4 pwrite writers 	=   88396.27 kB/sec
	Min throughput per process 			=   29918.58 kB/sec
	Max throughput per process 			=   49464.21 kB/sec
	Avg throughput per process 			=   36118.59 kB/sec
	Min xfer 					=     618.00 kB

	Children see throughput for 4 pread readers 	=  108271.53 kB/sec
	Parent sees throughput for 4 pread readers 	=   82214.48 kB/sec
	Min throughput per process 			=   23077.36 kB/sec
	Max throughput per process 			=   33606.73 kB/sec
	Avg throughput per process 			=   27067.88 kB/sec
	Min xfer 					=     704.00 kB



iozone test complete.
iozone throughtput pwritev/preadv measurements
	Iozone: Performance Test of File I/O
	        Version $Revision: 3.506 $
		Compiled for 64 bit mode.
		Build: linux

	Contributors:William Norcott, Don Capps, Isom Crawford, Kirby Collins
	             Al Slater, Scott Rhine, Mike Wisner, Ken Goss
	             Steve Landherr, Brad Smith, Mark Kelly, Dr. Alain CYR,
	             Randy Dunlap, Mark Montague, Dan Million, Gavin Brebner,
	             Jean-Marc Zucconi, Jeff Blomberg, Benny Halevy, Dave Boone,
	             Erik Habbinga, Kris Strecker, Walter Wong, Joshua Root,
	             Fabrice Bacchella, Zhenghua Xue, Qin Li, Darren Sawyer,
	             Vangel Bojaxhi, Ben England, Vikentsi Lapa,
	             Alexey Skidanov, Sudhir Kumar.

	Run began: Thu Mar  6 16:19:02 2025

	Selected test not available on the version.
	Record Size 1 kB
	File size set to 1024 kB
	Command line used: ./iozone -t 4 -i 11 -i 12 -r 1k -s 1m
	Output is in kBytes/sec
	Time Resolution = 0.000001 seconds.
	Processor cache size set to 1024 kBytes.
	Processor cache line size set to 32 bytes.
	File stride size set to 17 * record size.
	Throughput test with 4 processes
	Each process writes a 1024 kByte file in 1 kByte records

	Children see throughput for  4 initial writers 	=  182973.89 kB/sec
	Parent sees throughput for  4 initial writers 	=  127212.92 kB/sec
	Min throughput per process 			=   43247.86 kB/sec
	Max throughput per process 			=   49783.56 kB/sec
	Avg throughput per process 			=   45743.47 kB/sec
	Min xfer 					=     890.00 kB

	Children see throughput for  4 rewriters 	=  191023.52 kB/sec
	Parent sees throughput for  4 rewriters 	=  120275.54 kB/sec
	Min throughput per process 			=   39737.52 kB/sec
	Max throughput per process 			=   57947.85 kB/sec
	Avg throughput per process 			=   47755.88 kB/sec
	Min xfer 					=     703.00 kB



iozone test complete.
#### OS COMP TEST GROUP END iozone-musl ####
#### OS COMP TEST GROUP START libctest-musl ####
========== START entry-static.exe argv ==========
Pass!
========== END entry-static.exe argv ==========
========== START entry-static.exe basename ==========
Pass!
========== END entry-static.exe basename ==========
========== START entry-static.exe clocale_mbfuncs ==========
Pass!
========== END entry-static.exe clocale_mbfuncs ==========
========== START entry-static.exe clock_gettime ==========
Pass!
========== END entry-static.exe clock_gettime ==========
========== START entry-static.exe dirname ==========
Pass!
========== END entry-static.exe dirname ==========
========== START entry-static.exe env ==========
Pass!
========== END entry-static.exe env ==========
========== START entry-static.exe fdopen ==========
Pass!
========== END entry-static.exe fdopen ==========
========== START entry-static.exe fnmatch ==========
Pass!
========== END entry-static.exe fnmatch ==========
========== START entry-static.exe fscanf ==========
Pass!
========== END entry-static.exe fscanf ==========
========== START entry-static.exe fwscanf ==========
Pass!
========== END entry-static.exe fwscanf ==========
========== START entry-static.exe iconv_open ==========
Pass!
========== END entry-static.exe iconv_open ==========
========== START entry-static.exe inet_pton ==========
Pass!
========== END entry-static.exe inet_pton ==========
========== START entry-static.exe mbc ==========
Pass!
========== END entry-static.exe mbc ==========
========== START entry-static.exe memstream ==========
Pass!
========== END entry-static.exe memstream ==========
========== START entry-static.exe pthread_cancel_points ==========
Pass!
========== END entry-static.exe pthread_cancel_points ==========
========== START entry-static.exe pthread_cancel ==========
Pass!
========== END entry-static.exe pthread_cancel ==========
========== START entry-static.exe pthread_cond ==========
Pass!
========== END entry-static.exe pthread_cond ==========
========== START entry-static.exe pthread_tsd ==========
Pass!
========== END entry-static.exe pthread_tsd ==========
========== START entry-static.exe qsort ==========
Pass!
========== END entry-static.exe qsort ==========
========== START entry-static.exe random ==========
Pass!
========== END entry-static.exe random ==========
========== START entry-static.exe search_hsearch ==========
Pass!
========== END entry-static.exe search_hsearch ==========
========== START entry-static.exe search_insque ==========
Pass!
========== END entry-static.exe search_insque ==========
========== START entry-static.exe search_lsearch ==========
Pass!
========== END entry-static.exe search_lsearch ==========
========== START entry-static.exe search_tsearch ==========
Pass!
========== END entry-static.exe search_tsearch ==========
========== START entry-static.exe setjmp ==========
Pass!
========== END entry-static.exe setjmp ==========
========== START entry-static.exe snprintf ==========
Pass!
========== END entry-static.exe snprintf ==========
========== START entry-static.exe socket ==========
Pass!
========== END entry-static.exe socket ==========
========== START entry-static.exe sscanf ==========
Pass!
========== END entry-static.exe sscanf ==========
========== START entry-static.exe sscanf_long ==========
Pass!
========== END entry-static.exe sscanf_long ==========
========== START entry-static.exe stat ==========
Pass!
========== END entry-static.exe stat ==========
========== START entry-static.exe strftime ==========
Pass!
========== END entry-static.exe strftime ==========
========== START entry-static.exe string ==========
Pass!
========== END entry-static.exe string ==========
========== START entry-static.exe string_memcpy ==========
Pass!
========== END entry-static.exe string_memcpy ==========
========== START entry-static.exe string_memmem ==========
Pass!
========== END entry-static.exe string_memmem ==========
========== START entry-static.exe string_memset ==========
Pass!
========== END entry-static.exe string_memset ==========
========== START entry-static.exe string_strchr ==========
Pass!
========== END entry-static.exe string_strchr ==========
========== START entry-static.exe string_strcspn ==========
Pass!
========== END entry-static.exe string_strcspn ==========
========== START entry-static.exe string_strstr ==========
Pass!
========== END entry-static.exe string_strstr ==========
========== START entry-static.exe strptime ==========
Pass!
========== END entry-static.exe strptime ==========
========== START entry-static.exe strtod ==========
Pass!
========== END entry-static.exe strtod ==========
========== START entry-static.exe strtod_simple ==========
Pass!
========== END entry-static.exe strtod_simple ==========
========== START entry-static.exe strtof ==========
Pass!
========== END entry-static.exe strtof ==========
========== START entry-static.exe strtol ==========
Pass!
========== END entry-static.exe strtol ==========
========== START entry-static.exe strtold ==========
Pass!
========== END entry-static.exe strtold ==========
========== START entry-static.exe swprintf ==========
Pass!
========== END entry-static.exe swprintf ==========
========== START entry-static.exe tgmath ==========
Pass!
========== END entry-static.exe tgmath ==========
========== START entry-static.exe time ==========
Pass!
========== END entry-static.exe time ==========
========== START entry-static.exe tls_align ==========
Pass!
========== END entry-static.exe tls_align ==========
========== START entry-static.exe udiv ==========
Pass!
========== END entry-static.exe udiv ==========
========== START entry-static.exe ungetc ==========
Pass!
========== END entry-static.exe ungetc ==========
========== START entry-static.exe utime ==========
Pass!
========== END entry-static.exe utime ==========
========== START entry-static.exe wcsstr ==========
Pass!
========== END entry-static.exe wcsstr ==========
========== START entry-static.exe wcstol ==========
Pass!
========== END entry-static.exe wcstol ==========
========== START entry-static.exe daemon_failure ==========
Pass!
========== END entry-static.exe daemon_failure ==========
========== START entry-static.exe dn_expand_empty ==========
Pass!
========== END entry-static.exe dn_expand_empty ==========
========== START entry-static.exe dn_expand_ptr_0 ==========
Pass!
========== END entry-static.exe dn_expand_ptr_0 ==========
========== START entry-static.exe fflush_exit ==========
Pass!
========== END entry-static.exe fflush_exit ==========
========== START entry-static.exe fgets_eof ==========
Pass!
========== END entry-static.exe fgets_eof ==========
========== START entry-static.exe fgetwc_buffering ==========
Pass!
========== END entry-static.exe fgetwc_buffering ==========
========== START entry-static.exe fpclassify_invalid_ld80 ==========
src/regression/fpclassify-invalid-ld80.c:56: fpclassify(normal with msb unset) failed: got FP_ZERO want FP_NAN
src/regression/fpclassify-invalid-ld80.c:56: snprintf("%La", normal with msb unset) failed: got "0x0p+0" want "nan"
src/regression/fpclassify-invalid-ld80.c:59: fpclassify(infinity with msb unset) failed: got FP_INFINITE want FP_NAN
src/regression/fpclassify-invalid-ld80.c:59: snprintf("%La", infinity with msb unset) failed: got "inf" want "nan"
FAIL fpclassify_invalid_ld80 [status 1]
========== END entry-static.exe fpclassify_invalid_ld80 ==========
========== START entry-static.exe ftello_unflushed_append ==========
Pass!
========== END entry-static.exe ftello_unflushed_append ==========
========== START entry-static.exe getpwnam_r_crash ==========
Pass!
========== END entry-static.exe getpwnam_r_crash ==========
========== START entry-static.exe getpwnam_r_errno ==========
Pass!
========== END entry-static.exe getpwnam_r_errno ==========
========== START entry-static.exe iconv_roundtrips ==========
Pass!
========== END entry-static.exe iconv_roundtrips ==========
========== START entry-static.exe inet_ntop_v4mapped ==========
Pass!
========== END entry-static.exe inet_ntop_v4mapped ==========
========== START entry-static.exe inet_pton_empty_last_field ==========
Pass!
========== END entry-static.exe inet_pton_empty_last_field ==========
========== START entry-static.exe iswspace_null ==========
Pass!
========== END entry-static.exe iswspace_null ==========
========== START entry-static.exe lrand48_signextend ==========
Pass!
========== END entry-static.exe lrand48_signextend ==========
========== START entry-static.exe lseek_large ==========
Pass!
========== END entry-static.exe lseek_large ==========
========== START entry-static.exe malloc_0 ==========
Pass!
========== END entry-static.exe malloc_0 ==========
========== START entry-static.exe mbsrtowcs_overflow ==========
Pass!
========== END entry-static.exe mbsrtowcs_overflow ==========
========== START entry-static.exe memmem_oob_read ==========
Pass!
========== END entry-static.exe memmem_oob_read ==========
========== START entry-static.exe memmem_oob ==========
Pass!
========== END entry-static.exe memmem_oob ==========
========== START entry-static.exe mkdtemp_failure ==========
Pass!
========== END entry-static.exe mkdtemp_failure ==========
========== START entry-static.exe mkstemp_failure ==========
Pass!
========== END entry-static.exe mkstemp_failure ==========
========== START entry-static.exe printf_1e9_oob ==========
Pass!
========== END entry-static.exe printf_1e9_oob ==========
========== START entry-static.exe printf_fmt_g_round ==========
Pass!
========== END entry-static.exe printf_fmt_g_round ==========
========== START entry-static.exe printf_fmt_g_zeros ==========
Pass!
========== END entry-static.exe printf_fmt_g_zeros ==========
========== START entry-static.exe printf_fmt_n ==========
Pass!
========== END entry-static.exe printf_fmt_n ==========
========== START entry-static.exe pthread_robust_detach ==========
Pass!
========== END entry-static.exe pthread_robust_detach ==========
========== START entry-static.exe pthread_cancel_sem_wait ==========
Pass!
========== END entry-static.exe pthread_cancel_sem_wait ==========
========== START entry-static.exe pthread_cond_smasher ==========
Pass!
========== END entry-static.exe pthread_cond_smasher ==========
========== START entry-static.exe pthread_condattr_setclock ==========
Pass!
========== END entry-static.exe pthread_condattr_setclock ==========
========== START entry-static.exe pthread_exit_cancel ==========
Pass!
========== END entry-static.exe pthread_exit_cancel ==========
========== START entry-static.exe pthread_once_deadlock ==========
Pass!
========== END entry-static.exe pthread_once_deadlock ==========
========== START entry-static.exe pthread_rwlock_ebusy ==========
Pass!
========== END entry-static.exe pthread_rwlock_ebusy ==========
========== START entry-static.exe putenv_doublefree ==========
Pass!
========== END entry-static.exe putenv_doublefree ==========
========== START entry-static.exe regex_backref_0 ==========
Pass!
========== END entry-static.exe regex_backref_0 ==========
========== START entry-static.exe regex_bracket_icase ==========
Pass!
========== END entry-static.exe regex_bracket_icase ==========
========== START entry-static.exe regex_ere_backref ==========
Pass!
========== END entry-static.exe regex_ere_backref ==========
========== START entry-static.exe regex_escaped_high_byte ==========
Pass!
========== END entry-static.exe regex_escaped_high_byte ==========
========== START entry-static.exe regex_negated_range ==========
Pass!
========== END entry-static.exe regex_negated_range ==========
========== START entry-static.exe regexec_nosub ==========
Pass!
========== END entry-static.exe regexec_nosub ==========
========== START entry-static.exe rewind_clear_error ==========
Pass!
========== END entry-static.exe rewind_clear_error ==========
========== START entry-static.exe rlimit_open_files ==========
Pass!
========== END entry-static.exe rlimit_open_files ==========
========== START entry-static.exe scanf_bytes_consumed ==========
Pass!
========== END entry-static.exe scanf_bytes_consumed ==========
========== START entry-static.exe scanf_match_literal_eof ==========
Pass!
========== END entry-static.exe scanf_match_literal_eof ==========
========== START entry-static.exe scanf_nullbyte_char ==========
Pass!
========== END entry-static.exe scanf_nullbyte_char ==========
========== START entry-static.exe setvbuf_unget ==========
Pass!
========== END entry-static.exe setvbuf_unget ==========
========== START entry-static.exe sigprocmask_internal ==========
Pass!
========== END entry-static.exe sigprocmask_internal ==========
========== START entry-static.exe sscanf_eof ==========
Pass!
========== END entry-static.exe sscanf_eof ==========
========== START entry-static.exe statvfs ==========
Pass!
========== END entry-static.exe statvfs ==========
========== START entry-static.exe strverscmp ==========
Pass!
========== END entry-static.exe strverscmp ==========
========== START entry-static.exe syscall_sign_extend ==========
Pass!
========== END entry-static.exe syscall_sign_extend ==========
========== START entry-static.exe uselocale_0 ==========
Pass!
========== END entry-static.exe uselocale_0 ==========
========== START entry-static.exe wcsncpy_read_overflow ==========
Pass!
========== END entry-static.exe wcsncpy_read_overflow ==========
========== START entry-static.exe wcsstr_false_negative ==========
Pass!
========== END entry-static.exe wcsstr_false_negative ==========
========== START entry-dynamic.exe argv ==========
Pass!
========== END entry-dynamic.exe argv ==========
========== START entry-dynamic.exe basename ==========
Pass!
========== END entry-dynamic.exe basename ==========
========== START entry-dynamic.exe clocale_mbfuncs ==========
Pass!
========== END entry-dynamic.exe clocale_mbfuncs ==========
========== START entry-dynamic.exe clock_gettime ==========
Pass!
========== END entry-dynamic.exe clock_gettime ==========
========== START entry-dynamic.exe dirname ==========
Pass!
========== END entry-dynamic.exe dirname ==========
========== START entry-dynamic.exe dlopen ==========
src/functional/dlopen.c:18: dlopen ./dlopen_dso.so failed: Dynamic loading not supported
src/functional/dlopen.c:21: dlsym i failed: Symbol not found: i
FAIL dlopen [signal Segmentation fault]
========== END entry-dynamic.exe dlopen ==========
========== START entry-dynamic.exe env ==========
Pass!
========== END entry-dynamic.exe env ==========
========== START entry-dynamic.exe fdopen ==========
Pass!
========== END entry-dynamic.exe fdopen ==========
========== START entry-dynamic.exe fnmatch ==========
Pass!
========== END entry-dynamic.exe fnmatch ==========
========== START entry-dynamic.exe fscanf ==========
Pass!
========== END entry-dynamic.exe fscanf ==========
========== START entry-dynamic.exe fwscanf ==========
Pass!
========== END entry-dynamic.exe fwscanf ==========
========== START entry-dynamic.exe iconv_open ==========
Pass!
========== END entry-dynamic.exe iconv_open ==========
========== START entry-dynamic.exe inet_pton ==========
Pass!
========== END entry-dynamic.exe inet_pton ==========
========== START entry-dynamic.exe mbc ==========
Pass!
========== END entry-dynamic.exe mbc ==========
========== START entry-dynamic.exe memstream ==========
Pass!
========== END entry-dynamic.exe memstream ==========
========== START entry-dynamic.exe pthread_cancel_points ==========
Pass!
========== END entry-dynamic.exe pthread_cancel_points ==========
========== START entry-dynamic.exe pthread_cancel ==========
Pass!
========== END entry-dynamic.exe pthread_cancel ==========
========== START entry-dynamic.exe pthread_cond ==========
Pass!
========== END entry-dynamic.exe pthread_cond ==========
========== START entry-dynamic.exe pthread_tsd ==========
Pass!
========== END entry-dynamic.exe pthread_tsd ==========
========== START entry-dynamic.exe qsort ==========
Pass!
========== END entry-dynamic.exe qsort ==========
========== START entry-dynamic.exe random ==========
Pass!
========== END entry-dynamic.exe random ==========
========== START entry-dynamic.exe search_hsearch ==========
Pass!
========== END entry-dynamic.exe search_hsearch ==========
========== START entry-dynamic.exe search_insque ==========
Pass!
========== END entry-dynamic.exe search_insque ==========
========== START entry-dynamic.exe search_lsearch ==========
Pass!
========== END entry-dynamic.exe search_lsearch ==========
========== START entry-dynamic.exe search_tsearch ==========
Pass!
========== END entry-dynamic.exe search_tsearch ==========
========== START entry-dynamic.exe sem_init ==========
Pass!
========== END entry-dynamic.exe sem_init ==========
========== START entry-dynamic.exe setjmp ==========
Pass!
========== END entry-dynamic.exe setjmp ==========
========== START entry-dynamic.exe snprintf ==========
Pass!
========== END entry-dynamic.exe snprintf ==========
========== START entry-dynamic.exe socket ==========
Pass!
========== END entry-dynamic.exe socket ==========
========== START entry-dynamic.exe sscanf ==========
Pass!
========== END entry-dynamic.exe sscanf ==========
========== START entry-dynamic.exe sscanf_long ==========
Pass!
========== END entry-dynamic.exe sscanf_long ==========
========== START entry-dynamic.exe stat ==========
Pass!
========== END entry-dynamic.exe stat ==========
========== START entry-dynamic.exe strftime ==========
Pass!
========== END entry-dynamic.exe strftime ==========
========== START entry-dynamic.exe string ==========
Pass!
========== END entry-dynamic.exe string ==========
========== START entry-dynamic.exe string_memcpy ==========
Pass!
========== END entry-dynamic.exe string_memcpy ==========
========== START entry-dynamic.exe string_memmem ==========
Pass!
========== END entry-dynamic.exe string_memmem ==========
========== START entry-dynamic.exe string_memset ==========
Pass!
========== END entry-dynamic.exe string_memset ==========
========== START entry-dynamic.exe string_strchr ==========
Pass!
========== END entry-dynamic.exe string_strchr ==========
========== START entry-dynamic.exe string_strcspn ==========
Pass!
========== END entry-dynamic.exe string_strcspn ==========
========== START entry-dynamic.exe string_strstr ==========
Pass!
========== END entry-dynamic.exe string_strstr ==========
========== START entry-dynamic.exe strptime ==========
Pass!
========== END entry-dynamic.exe strptime ==========
========== START entry-dynamic.exe strtod ==========
Pass!
========== END entry-dynamic.exe strtod ==========
========== START entry-dynamic.exe strtod_simple ==========
Pass!
========== END entry-dynamic.exe strtod_simple ==========
========== START entry-dynamic.exe strtof ==========
Pass!
========== END entry-dynamic.exe strtof ==========
========== START entry-dynamic.exe strtol ==========
Pass!
========== END entry-dynamic.exe strtol ==========
========== START entry-dynamic.exe strtold ==========
Pass!
========== END entry-dynamic.exe strtold ==========
========== START entry-dynamic.exe swprintf ==========
Pass!
========== END entry-dynamic.exe swprintf ==========
========== START entry-dynamic.exe tgmath ==========
Pass!
========== END entry-dynamic.exe tgmath ==========
========== START entry-dynamic.exe time ==========
Pass!
========== END entry-dynamic.exe time ==========
========== START entry-dynamic.exe tls_init ==========
Pass!
========== END entry-dynamic.exe tls_init ==========
========== START entry-dynamic.exe tls_local_exec ==========
Pass!
========== END entry-dynamic.exe tls_local_exec ==========
========== START entry-dynamic.exe udiv ==========
Pass!
========== END entry-dynamic.exe udiv ==========
========== START entry-dynamic.exe ungetc ==========
Pass!
========== END entry-dynamic.exe ungetc ==========
========== START entry-dynamic.exe utime ==========
Pass!
========== END entry-dynamic.exe utime ==========
========== START entry-dynamic.exe wcsstr ==========
Pass!
========== END entry-dynamic.exe wcsstr ==========
========== START entry-dynamic.exe wcstol ==========
Pass!
========== END entry-dynamic.exe wcstol ==========
========== START entry-dynamic.exe daemon_failure ==========
Pass!
========== END entry-dynamic.exe daemon_failure ==========
========== START entry-dynamic.exe dn_expand_empty ==========
Pass!
========== END entry-dynamic.exe dn_expand_empty ==========
========== START entry-dynamic.exe dn_expand_ptr_0 ==========
Pass!
========== END entry-dynamic.exe dn_expand_ptr_0 ==========
========== START entry-dynamic.exe fflush_exit ==========
Pass!
========== END entry-dynamic.exe fflush_exit ==========
========== START entry-dynamic.exe fgets_eof ==========
Pass!
========== END entry-dynamic.exe fgets_eof ==========
========== START entry-dynamic.exe fgetwc_buffering ==========
Pass!
========== END entry-dynamic.exe fgetwc_buffering ==========
========== START entry-dynamic.exe fpclassify_invalid_ld80 ==========
src/regression/fpclassify-invalid-ld80.c:56: fpclassify(normal with msb unset) failed: got FP_ZERO want FP_NAN
src/regression/fpclassify-invalid-ld80.c:56: snprintf("%La", normal with msb unset) failed: got "0x0p+0" want "nan"
src/regression/fpclassify-invalid-ld80.c:59: fpclassify(infinity with msb unset) failed: got FP_INFINITE want FP_NAN
src/regression/fpclassify-invalid-ld80.c:59: snprintf("%La", infinity with msb unset) failed: got "inf" want "nan"
FAIL fpclassify_invalid_ld80 [status 1]
========== END entry-dynamic.exe fpclassify_invalid_ld80 ==========
========== START entry-dynamic.exe ftello_unflushed_append ==========
Pass!
========== END entry-dynamic.exe ftello_unflushed_append ==========
========== START entry-dynamic.exe getpwnam_r_crash ==========
Pass!
========== END entry-dynamic.exe getpwnam_r_crash ==========
========== START entry-dynamic.exe getpwnam_r_errno ==========
Pass!
========== END entry-dynamic.exe getpwnam_r_errno ==========
========== START entry-dynamic.exe iconv_roundtrips ==========
Pass!
========== END entry-dynamic.exe iconv_roundtrips ==========
========== START entry-dynamic.exe inet_ntop_v4mapped ==========
Pass!
========== END entry-dynamic.exe inet_ntop_v4mapped ==========
========== START entry-dynamic.exe inet_pton_empty_last_field ==========
Pass!
========== END entry-dynamic.exe inet_pton_empty_last_field ==========
========== START entry-dynamic.exe iswspace_null ==========
Pass!
========== END entry-dynamic.exe iswspace_null ==========
========== START entry-dynamic.exe lrand48_signextend ==========
Pass!
========== END entry-dynamic.exe lrand48_signextend ==========
========== START entry-dynamic.exe lseek_large ==========
Pass!
========== END entry-dynamic.exe lseek_large ==========
========== START entry-dynamic.exe malloc_0 ==========
Pass!
========== END entry-dynamic.exe malloc_0 ==========
========== START entry-dynamic.exe mbsrtowcs_overflow ==========
Pass!
========== END entry-dynamic.exe mbsrtowcs_overflow ==========
========== START entry-dynamic.exe memmem_oob_read ==========
Pass!
========== END entry-dynamic.exe memmem_oob_read ==========
========== START entry-dynamic.exe memmem_oob ==========
Pass!
========== END entry-dynamic.exe memmem_oob ==========
========== START entry-dynamic.exe mkdtemp_failure ==========
Pass!
========== END entry-dynamic.exe mkdtemp_failure ==========
========== START entry-dynamic.exe mkstemp_failure ==========
Pass!
========== END entry-dynamic.exe mkstemp_failure ==========
========== START entry-dynamic.exe printf_1e9_oob ==========
Pass!
========== END entry-dynamic.exe printf_1e9_oob ==========
========== START entry-dynamic.exe printf_fmt_g_round ==========
Pass!
========== END entry-dynamic.exe printf_fmt_g_round ==========
========== START entry-dynamic.exe printf_fmt_g_zeros ==========
Pass!
========== END entry-dynamic.exe printf_fmt_g_zeros ==========
========== START entry-dynamic.exe printf_fmt_n ==========
Pass!
========== END entry-dynamic.exe printf_fmt_n ==========
========== START entry-dynamic.exe pthread_robust_detach ==========
Pass!
========== END entry-dynamic.exe pthread_robust_detach ==========
========== START entry-dynamic.exe pthread_cond_smasher ==========
Pass!
========== END entry-dynamic.exe pthread_cond_smasher ==========
========== START entry-dynamic.exe pthread_condattr_setclock ==========
Pass!
========== END entry-dynamic.exe pthread_condattr_setclock ==========
========== START entry-dynamic.exe pthread_exit_cancel ==========
Pass!
========== END entry-dynamic.exe pthread_exit_cancel ==========
========== START entry-dynamic.exe pthread_once_deadlock ==========
Pass!
========== END entry-dynamic.exe pthread_once_deadlock ==========
========== START entry-dynamic.exe pthread_rwlock_ebusy ==========
Pass!
========== END entry-dynamic.exe pthread_rwlock_ebusy ==========
========== START entry-dynamic.exe putenv_doublefree ==========
Pass!
========== END entry-dynamic.exe putenv_doublefree ==========
========== START entry-dynamic.exe regex_backref_0 ==========
Pass!
========== END entry-dynamic.exe regex_backref_0 ==========
========== START entry-dynamic.exe regex_bracket_icase ==========
Pass!
========== END entry-dynamic.exe regex_bracket_icase ==========
========== START entry-dynamic.exe regex_ere_backref ==========
Pass!
========== END entry-dynamic.exe regex_ere_backref ==========
========== START entry-dynamic.exe regex_escaped_high_byte ==========
Pass!
========== END entry-dynamic.exe regex_escaped_high_byte ==========
========== START entry-dynamic.exe regex_negated_range ==========
Pass!
========== END entry-dynamic.exe regex_negated_range ==========
========== START entry-dynamic.exe regexec_nosub ==========
Pass!
========== END entry-dynamic.exe regexec_nosub ==========
========== START entry-dynamic.exe rewind_clear_error ==========
Pass!
========== END entry-dynamic.exe rewind_clear_error ==========
========== START entry-dynamic.exe rlimit_open_files ==========
Pass!
========== END entry-dynamic.exe rlimit_open_files ==========
========== START entry-dynamic.exe scanf_bytes_consumed ==========
Pass!
========== END entry-dynamic.exe scanf_bytes_consumed ==========
========== START entry-dynamic.exe scanf_match_literal_eof ==========
Pass!
========== END entry-dynamic.exe scanf_match_literal_eof ==========
========== START entry-dynamic.exe scanf_nullbyte_char ==========
Pass!
========== END entry-dynamic.exe scanf_nullbyte_char ==========
========== START entry-dynamic.exe setvbuf_unget ==========
Pass!
========== END entry-dynamic.exe setvbuf_unget ==========
========== START entry-dynamic.exe sigprocmask_internal ==========
Pass!
========== END entry-dynamic.exe sigprocmask_internal ==========
========== START entry-dynamic.exe sscanf_eof ==========
Pass!
========== END entry-dynamic.exe sscanf_eof ==========
========== START entry-dynamic.exe statvfs ==========
Pass!
========== END entry-dynamic.exe statvfs ==========
========== START entry-dynamic.exe strverscmp ==========
Pass!
========== END entry-dynamic.exe strverscmp ==========
========== START entry-dynamic.exe syscall_sign_extend ==========
Pass!
========== END entry-dynamic.exe syscall_sign_extend ==========
========== START entry-dynamic.exe tls_get_new_dtv ==========
src/regression/tls_get_new-dtv.c:32: mod = dlopen("tls_get_new-dtv_dso.so", RTLD_NOW) failed
src/regression/tls_get_new-dtv.c:18: f = dlsym(mod, "f") failed
src/regression/tls_get_new-dtv.c:18: f = dlsym(mod, "f") failed
src/regression/tls_get_new-dtv.c:18: f = dlsym(mod, "f") failed
src/regression/tls_get_new-dtv.c:18: f = dlsym(mod, "f") failed
src/regression/tls_get_new-dtv.c:18: f = dlsym(mod, "f") failed
src/regression/tls_get_new-dtv.c:18: f = dlsym(mod, "f") failed
FAIL tls_get_new_dtv [signal Segmentation fault]
========== END entry-dynamic.exe tls_get_new_dtv ==========
========== START entry-dynamic.exe uselocale_0 ==========
Pass!
========== END entry-dynamic.exe uselocale_0 ==========
========== START entry-dynamic.exe wcsncpy_read_overflow ==========
Pass!
========== END entry-dynamic.exe wcsncpy_read_overflow ==========
========== START entry-dynamic.exe wcsstr_false_negative ==========
Pass!
========== END entry-dynamic.exe wcsstr_false_negative ==========
#### OS COMP TEST GROUP START libctest-musl ####
#### OS COMP TEST GROUP START lua-musl ####
testcase lua date.lua success
testcase lua file_io.lua success
testcase lua max_min.lua success
testcase lua random.lua success
testcase lua remove.lua success
testcase lua round_num.lua success
testcase lua sin30.lua success
testcase lua sort.lua success
testcase lua strings.lua success
#### OS COMP TEST GROUP END lua-musl ####
